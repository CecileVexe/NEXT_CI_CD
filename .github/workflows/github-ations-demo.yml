name: üöÄ Build and deploy
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üöÄ Lancement des √©tapes de construction"
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üöÄ Le code du d√©p√¥t a √©t√© clon√© sur le serveur d'ex√©cution."
      - run: npm clean-install
      - run: npm run build
      - name: Save cache (node_modules)
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run : echo "üèÅ √âtapes de construction termin√©es"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, edge]
    needs:
        - build
    steps:
      - run: echo "üöÄ Lancement des √©tapes de test"
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: echo "üöÄ Le code du d√©p√¥t a √©t√© clon√© sur le serveur d'ex√©cution."
      #- run: npm run e2e:headless
      - uses: cypress-io/github-action@v6
        with: 
          install: false
          start: npm run dev
          browser: ${{matrix.browser}}
      - run : echo "üöÄ √âtapes de test termin√©es"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
        #Pour √©viter une erreur de donn√©es dupliqu√©, on donne un nom dynamique
          name: cypress-video-${{matrix.browser}}
          path: cypress/videos/
          retention-days: 5
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{matrix.browser}}
          path: cypress/screenshots/
          retention-days: 5
  
  deploy :
    runs-on: ubuntu-latest
    needs : test
    steps:
    - uses: actions/checkout@v4 #recup√©rer le code
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > github-ec2.pem && chmod 600 github-ec2.pem
        ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} '
        echo "Current directory: $(pwd)"
        echo "Listing home directory:"
        ls -la ~

        echo "Installing Node.js..."
        if ! command -v nvm &> /dev/null; then
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        fi
        nvm install node

        echo "Installing PM2..."
        if ! command -v pm2 &> /dev/null; then
        npm install -g pm2
        fi

        REPO_URL="https://github.com/CecileVexe/NEXT_CI_CD"
        BRANCH="main"
        REPO_DIR="$HOME"

        if [ -d "$REPO_DIR/.git" ]; then
          cd "$REPO_DIR"
          git pull origin "$BRANCH"
        else
          git clone "$REPO_URL" "$REPO_DIR"
          cd "$REPO_DIR"
        fi

        cd "$REPO_DIR/NEXT_CI_CD"
        git pull origin main
        npm install
        npm run build

        echo "Starting/restarting application..."
        pm2 restart NEXT_CI_CD || pm2 start npm --name NEXT_CI_CD -- run start
        pm2 list
        '
  
  build-push-docker :
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    needs: test
    steps:
    - uses: actions/checkout@v4 #recup√©rer le code
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}
    - name: Build and push docker
      uses: docker/build-push-action@v6
      with: 
        context : .
        push: true
        target: next-ci-cd #nom de l'image concern√© dans le Dockerfile
        tags: ghcr.io/cecilevexe/next_ci_cd/next-ci-cd
  
  # deploy-docker:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-push-docker
  #   steps:
  #     - uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_PRIVATE_KEY }}
  #         script: |
  #           cd prod
  #           sudo docker compose -f docker-compose.prod.yml pull
  #           sudo docker compose -f docker-compose.prod.yml up -d

   deploy-docker-on-prod:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
    on:
      push:
        branches:
          - main
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd prod
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d
  
  deploy-docker-on-test:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
    on:
      push:
        branches:
          - test
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            if [ -d "$HOME/test" ]; then
              mkdir test
            fi
            cd test
            sudo docker compose -f docker-compose.yml pull
            sudo docker compose -f docker-compose.yml up -d



